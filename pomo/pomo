#!/usr/bin/env bash

trap time_left USR1
trap : USR2 # terminate running pomo/break
trap time_spent HUP # current counters

buttons='25 min Pomodoro,5 min Break,30 min Break,Reset,End'
response=0

: "${POMO_TOOL:=zenity}"

function sleep_timer() {
  sleep "$1"
}

function time_spent () {
  echo
  grep : <<<"${message}"
}

function time_left () {
  finish_time=$(dateutils.dadd -i %s "${start_time}" +$((response * 60))s)
  time_left=$(dateutils.ddiff -f%Mm%0Ss now "${finish_time}")
  case ${response} in
    25) time_message="${buttons%%,*}" ;;
    5)  time_message=$(awk -F, '{print $2}' <<< "${buttons}") ;;
    30) time_message=$(awk -F, '{print $3}' <<< "${buttons}") ;;
  esac
  if [[ ${POMO_TOOL} == "xmessage" ]]; then
    time_message+=$'\n\n'
    time_message+="Time Left: ${time_left}"
    time_message+=$'\n\n'
    xmessage -name pomo -title "Pomodoro" -center -timeout 30 "${time_message}"
  elif [[ ${POMO_TOOL} == "zenity" ]]; then
    zenity --name pomo --title="Pomodoro" --info --timeout 30\
      --text "Time Left: ${time_left}"
  fi
}

function check_required() {
  if [[ ! -x $(command -v zenity) ]]; then
    POMO_TOOL="xmessage"
    if [[ ! -x $(command -v xmessage) ]]; then
      echo "ERROR: $0 requires zenity or xmessage"
      exit 128
    fi
  fi
  if [[ ! -x $(command -v dateutils.dadd) ]]; then
    echo "ERROR: $0 requires the dateutils package"
    exit 128
  fi
}

function main_zenity() {

  let count{25,5,30}=0 # poms, sbreaks, lbreaks
  ((terms=0))
  declare -a z_buttons=()

  while true; do
    message='<table>'
    message+='<tr><th colspan=2><h1>&#x1F345 Start Pomodoro</h1></th></tr>'
    message+='<tr><td>Pomodoros:</td>'
    message+="<td align=right>${count25}</td></tr>"
    message+='<tr><td> </td><td> </td></tr>'
    message+='<tr><td>Short breaks:</td>'
    message+="<td align=right>${count5}</td></tr>"
    message+='<tr><td>Long breaks:</td>'
    message+="<td align=right>${count30}</td></tr>"
    message+='<tr><td> </td><td> </td></tr>'
    message+='<tr><td>Early terminations:</td>'
    message+="<td align=right>${terms}</td></tr>"
    message+='</table>'

    z_buttons=('--cancel-label=End' '--ok-label=Reset')
    for i in {1..3}; do
      z_buttons+=("--extra-button=$(awk -F, '{print $'"$i"'}'\
        <<< "${buttons}")")
    done
    if response=$(zenity --name pomo --title="Pomodoro" --text-info --html\
      "${z_buttons[@]}" --filename=<(echo "${message}") 2>-); then
      let count{25,5,30}=0
      ((terms=0))
    elif [[ $? -eq 1 ]]; then
      response="${response%% *}"
      case ${response} in
        25|5|30)
          ((count"${response}"++))
          start_time=$(date -u +%s)
          coproc sleep_timer $((response * 60))
          ;;
        "")
          message=$'Pomodoros:\t\t'
          message+="${count25}"
          message+=$'\nShort breaks:\t\t'
          message+="${count5}"
          message+=$'\nLong breaks:\t\t'
          message+="${count30}"
          message+=$'\n\nEarly terminations:\t'
          message+="${terms}"
          time_spent
          exit
          ;;
      esac
      until wait "${COPROC_PID}"; do
        if [[ $? -eq 140 ]]; then # SIGUSR2
          kill "${COPROC_PID}"
          ((count"${response}"--))
          ((terms++))
          break
        fi
      done
    fi
  done
}

function main_xmessage() {

  let count{25,5,30}=0 # poms, sbreaks, lbreaks
  ((terms=0))

  if ! xrdb -q | grep -q pomo; then
    xrdb -merge - <<< 'pomo*font: 10x20'
  fi

  while true; do
    message=$'Start Pomodoro\n\nPomodoros:\t\t'
    message+="${count25}"
    message+=$'\nShort breaks:\t\t'
    message+="${count5}"
    message+=$'\nLong breaks:\t\t'
    message+="${count30}"
    message+=$'\n\nEarly terminations:\t'
    message+="${terms}"
    message+=$'\n\n'

    response=$(xmessage -name pomo -title "Pomodoro" -center -print \
      -buttons "${buttons}" "${message}"|cut -d\  -f1)

    case ${response} in
      25|5|30)
        ((count"${response}"++))
        start_time=$(date -u +%s)
        coproc sleep_timer $((response * 60))
        ;;
      Reset)
        let count{25,5,30}=0
        ((terms=0))
        ;;
      End)
        time_spent
        exit
        ;;
    esac

    until wait "${COPROC_PID}"; do
      if [[ $? -eq 140 ]]; then # SIGUSR2
        kill "${COPROC_PID}"
        ((count"${response}"--))
        ((terms++))
        break
      fi
    done
  done
}

check_required
main_${POMO_TOOL}
