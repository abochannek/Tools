#!/usr/bin/env bash
#
#  aws_dynamo_tables [ -S ] [-C ] [ -a ] [ -p ] [ -r regions ]
#
#  -S query serially
#  -C CSV output
#  -a all regions
#  -p production
#  -r regions
#
#  default region is configured in .aws/config or AWS_DEFAULT_REGION
#

MACOS_ERROR_MACRO='ifelse(index('${MACHTYPE#*-}',apple),0,
                   echo On macOS consider \"brew install TOOL\")'
# shellcheck disable=SC2016
TABLE_NAME_PRINT_MACRO='ifelse(CSV,t,printf "%s" ${table},
                        printf "%-${tw}s" ${table})'

script="${0##*/}"

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
  exec 1>&2
  printf "ERROR: %s requires GNU bash version 4.0 or later\n" "$script"
  eval "$(m4 -D TOOL=bash <<<"${MACOS_ERROR_MACRO}")"
  exit 128
fi

declare -a all_regions=(us-east-1 eu-central-1 ap-southeast-1 us-west-2)
declare -a prod_regions=(us-east-1 eu-central-1 ap-southeast-1)

usage() {
  printf  "Usage: %s [ -S ] [ -C ] [ -a ] [ -p ] [ -r regions ]\n" \
          "$script" 1>&2
  exit 1
}

declare -a regions=()
declare serial=nil csv=nil rflag=nil
while getopts ":SCapr:" options; do
  case ${options} in
    S) serial=t ;;
    C) csv=t ;;
    a) regions=("${all_regions[@]}") ;;
    p) regions=("${prod_regions[@]}") ;;
    r) rflag=t ;;
    *) usage ;;
  esac
done
if [[ ${rflag} == t ]]; then
  shift $((OPTIND - 2))
  regions=("$@")
fi

main() {
  check_aws
  check_regions

  declare -A regions_by_table
  declare -A tables_by_region
  fetch_tables

  declare -i rw tw
  if [[ ${serial} == nil && ! -x $(command -v parallel) ]]; then
    serial=t
  fi
  fetch_print_items
}

check_aws() {
  if [[ -x $(command -v aws) ]]; then
    while IFS= read -r; do
      if [[ ${REPLY} =~ _key[[:space:]]+'<not set>' ]]; then
        echo 'ERROR: AWS CLI tool not configured with credentials' 1>&2
        exit 128
      fi
      if [[ ! -v regions && ${REPLY} =~ region ]]; then
        if [[ ! ${REPLY} =~ None$ ]]; then
          regions=$(awk '{print $2}' <<<"${REPLY}")
        else
          usage
        fi
      fi
    done < <(aws configure list | tail +3)
  else
    exec 1>&2
    printf "ERROR: %s requires the AWS CLI tool to be installed\n" "$script"
    if [[ ${MACHTYPE} =~ apple|linux ]]; then
      echo 'Install the AWS CLI tool using "pip install awscli"'
    fi
    exit 128
  fi
  if [[ ! -x $(command -v jq) ]]; then
    exec 1>&2
    printf  "ERROR: %s requires the jq tool to be installed\n" "$script"
    eval "$(m4 -D TOOL=jq <<<"${MACOS_ERROR_MACRO}")"
    exit 128
  fi
}

check_regions() {
  mapfile < <(aws --output json ec2 describe-regions |
    jq --raw-output ".Regions[].RegionName")
  for region in "${regions[@]}"; do
    if [[ ! ${MAPFILE[*]} =~ ${region} ]]; then
      echo "ERROR: Incorrect region ${region}" 1>&2
      exit 1
    fi
  done
}

fetch_tables() {
  echo "Retrieving AWS DynamoDB tables..." 1>&2
  for region in "${regions[@]}"; do
    local list
    list=$(aws dynamodb --output json --region "${region}" list-tables |
      jq --raw-output ".TableNames[]")
    # Build up two associative arrays
    # regions_by_table is structured for output
    # tables_by_region is optimized for parallel item fetching
    tables_by_region[${region}]=${list}
    for table in ${list}; do
      regions_by_table[${table}]+="${region} "
    done
  done
}

fetch_print_items() {
  # If parallel, prefetch all tables and fill in output array later
  # If serial, fill in the output array one item at a time
  if [[ ${serial} == nil ]]; then
    local -A tables_and_items_by_region=()
    echo "Please wait..." 1>&2
    for region in "${!tables_by_region[@]}"; do
      tables_and_items_by_region[${region}]=$(parallel --will-cite --jobs 0 --keep-order \
        'aws --output json --region '"${region}"' dynamodb describe-table' \
        '--table-name {} | jq --raw-output ".Table|(.TableName,.ItemCount)"' \
        ::: "${tables_by_region[${region}]}")
    done
  fi
  print_table_header
  for table in $(tr ' ' '\n' <<<"${!regions_by_table[@]}" | sort); do
    local -A items=()
    eval "$(m4 -D CSV=${csv} <<<"${TABLE_NAME_PRINT_MACRO}")"
    for region in "${regions[@]}"; do
      local item
      case ${serial} in
        t)
          if [[ ${regions_by_table[${table}]} =~ ${region} ]]; then
            item=$(aws --output json --region "${region}" \
              dynamodb describe-table --table-name "${table}" |
              jq ".Table.ItemCount")
            items[${region}]=${item}
          fi
          ;;
        nil)
          if [[ ${tables_and_items_by_region[${region}]} =~ ${table} ]]; then
            item=$(sed -n "/${table}/{n;p;}" <<<"${tables_and_items_by_region[${region}]}")
            items[${region}]=${item}
          fi
          ;;
      esac
    done
    print_item_counts
  done
}

print_table_header() {
  local table_keys=${!regions_by_table[*]}
  eval "$(echo "r " "${regions[@]}" ";t " "${table_keys[@]}" |
    awk 'BEGIN {rw=0; tw=0}
             function size()
             {
             for (i=2; i<=NF; i++) {
                 cur=length($i)
                 max=(cur>max?cur:max)
                 }
             return(max)
             }
             /^r / {
                   rw=size()
                   # expect >10^9 items
                   rw=(rw<14?14:rw)
                   }
             /^t / {tw=size()}
             END {
                  printf "rw=%d tw=%d\n", ++rw, ++tw
                 }' RS=\;)"

  if [[ ${csv} == nil ]]; then
    printf "%-${tw}s" "TABLE"
    for region in "${regions[@]}"; do
      printf "%${rw}s" "${region^^}"
    done
  else
    printf "TABLE"
    for region in "${regions[@]}"; do printf ",%s" "${region^^}"; done
  fi
  echo
}

print_item_counts() {
  if [[ ${csv} == nil ]]; then
    for region in "${regions[@]}"; do
      if [[ ! -v items[${region}] ]]; then
        printf "%${rw}s" "-"
      else
        printf "%'${rw}d" "${items[${region}]}"
      fi
    done
  else
    for region in "${regions[@]}"; do
      if [[ ! -v items[${region}] ]]; then
        printf ",-"
      else
        printf ",%s" "${items[${region}]}"
      fi
    done
  fi
  echo
}

main

exit 0
